//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Company.cpp
//  @ Date : 30.03.2023
//  @ Author : 
//
//


#include "Company.h"
#include "Employee.h"

string Company::getCompanyName() {
    return companyName;
}

void Company::getManagers() {
    for (Manager manager: managers) {
        manager.getFullEmpInfo();
    }
}

void Company::getEmployees() {
    for (Employee employee: employees) {
        employee.getFullEmpInfo();
    }
}

void Company::setSalaryToEmployeeID(int id, int salary) {
    for (Employee employee: employees) {
        if(employee.getID()==id){
            employee.setSalary(salary, true);
        }
    }
    for (Manager manager: managers) {
        if(manager.getID()==id){
            manager.setSalary(salary, true);
        }
    }
}

void Company::hireEmployee(int id, string name, bool isManager, int salary) {
    if(isManager){
        managers.push_back(*new Manager(id,name,true,salary));
    }else{
        employees.push_back(*new Employee(id,name,isManager,salary));
    }
}

void Company::fireEmployeeWithID(int id) {
    int idxEmp=0;
    int idxMan=0;
    for (Employee employee: employees) {
        if(employee.getID() == id){
            employees.erase(employees.begin()+idxEmp);
        }
        idxEmp++;
    }
    for(Manager manager : managers){
        if(manager.getID() == id){
            employees.erase(employees.begin()+idxEmp);
        }
        idxMan++;
    }
}

void Company::setCompanyName(string name) {
    this->companyName = name;
}
Company::Company(string companyName){
    this->companyName = std::move(companyName);
};
Company::~Company(){
    managers.clear();
    employees.clear();
}

void Company::hireEmployee(Employee employee) {
    employees.push_back(employee);
}

void Company::hireManager(Manager manager) {
    managers.push_back(manager);
}

Employee Company::getEmployeeByID(int id) {
    for(Employee employee : employees){
        if(employee.getID()==id){
            return employee;
        }
    }
}

Manager Company::getManagerByID(int id) {
    for(Manager manager : managers){
        if(manager.getID()==id){
            return manager;
        }
    }
}

